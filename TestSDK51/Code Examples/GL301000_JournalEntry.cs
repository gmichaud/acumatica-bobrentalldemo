#region Date: Friday, December 26, 2014
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Controls.Button;
using Controls.CheckBox;
using Controls.Container;
using Controls.Editors.DateSelector;
using Controls.Editors.DropDown;
using Controls.Editors.Selector;
using Controls.Grid;
using Controls.Grid.Filter;
using Controls.Grid.Upload;
using Controls.Input;
using Controls.PxControlCollection;
using Controls.ToolBarButton;
using Core.Core.Browser;
using System;


namespace Core {
    
    
    public class GL301000_JournalEntry : BaseWrapper {
        
        public PxToolBar ToolBar {get;set;} //;
        
        private c_batchmodule_form batchmodule_form;
        
        private c_firstselect_formactions firstselect_formactions;
        
        private c_vieweleminfo_formeleminfo vieweleminfo_formeleminfo;
        
        private c_filterworkingproject_formnewproject filterworkingproject_formnewproject;
        
        private c_filterworkingproject_formselectproject filterworkingproject_formselectproject;
        
        private c__batch_currencyinfo__rf _batch_currencyinfo__rf;
        
        private c_gltranmodulebatnbr_lv0 gltranmodulebatnbr_lv0;
        
        private c_gltranmodulebatnbr_grid gltranmodulebatnbr_grid;
        
        private c_gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings;
        
        private c_gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings;
        
        private c_gltranmodulebatnbr_importcolumns_grdimportcolumn gltranmodulebatnbr_importcolumns_grdimportcolumn;
        
        private c_gltranmodulebatnbr_importcolumns_lv0 gltranmodulebatnbr_importcolumns_lv0;
        
		public virtual void ClearFilter ()
		{
			ToolBar.ClearFilter.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Note ()
		{
			ToolBar.Note.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ActivityShow ()
		{
			ToolBar.ActivityShow.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void FilesMenuShow ()
		{
			ToolBar.FilesMenuShow.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Custom ()
		{
			ToolBar.Custom.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void SelectProject ()
		{
			ToolBar.SelectProject.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void InspectelementCtrlAtlClick ()
		{
			ToolBar.InspectelementCtrlAtlClick.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void EditProject ()
		{
			ToolBar.EditProject.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ManageCustomizations ()
		{
			ToolBar.ManageCustomizations.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ActionNavigateAspx ()
		{
			ToolBar.ActionNavigateAspx.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ActionCreateNewProject ()
		{
			ToolBar.ActionCreateNewProject.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuLayoutEditor ()
		{
			ToolBar.MenuLayoutEditor.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuEditProj ()
		{
			ToolBar.MenuEditProj.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuDacEditor ()
		{
			ToolBar.MenuDacEditor.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuGraphEditor ()
		{
			ToolBar.MenuGraphEditor.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuLayoutSrc ()
		{
			ToolBar.MenuLayoutSrc.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuGraphSrc ()
		{
			ToolBar.MenuGraphSrc.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuDacSrc ()
		{
			ToolBar.MenuDacSrc.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuLayoutVS ()
		{
			ToolBar.MenuLayoutVS.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuDacVS ()
		{
			ToolBar.MenuDacVS.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void MenuGraphVS ()
		{
			ToolBar.MenuGraphVS.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ActionSelectWorkingProject ()
		{
			ToolBar.ActionSelectWorkingProject.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void LongRun ()
		{
			ToolBar.LongRun.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ElapsedTime ()
		{
			ToolBar.ElapsedTime.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Save()
		{
			if(ToolBar.Save.IsEnabled())
			{
				ToolBar.Save.ClickAndWait();
				Browser.TraceErrors();
				if (Browser.GetBrowser().Alert != null)
				{
 					throw new Exception("ALERT: " + Browser.GetBrowser().Alert.Message); 
				}
			}
		}
		public virtual void Cancel ()
		{
			ToolBar.Cancel.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Insert ()
		{
			ToolBar.Insert.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Clipboard ()
		{
			ToolBar.Clipboard.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Delete ()
		{
			ToolBar.Delete.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void First ()
		{
			ToolBar.First.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Previous ()
		{
			ToolBar.Previous.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Next ()
		{
			ToolBar.Next.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Last ()
		{
			ToolBar.Last.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Release ()
		{
			ToolBar.Release.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Actions ()
		{
			ToolBar.Actions.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void Reports ()
		{
			ToolBar.Reports.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void LongRun2 ()
		{
			ToolBar.LongRun2.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ElapsedTime2 ()
		{
			ToolBar.ElapsedTime2.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void CopyDocument ()
		{
			ToolBar.CopyDocument.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void PasteDocument ()
		{
			ToolBar.PasteDocument.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void SaveTemplate ()
		{
			ToolBar.SaveTemplate.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void #1 ()
		{
			ToolBar.#1.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void ReverseBatch ()
		{
			ToolBar.ReverseBatch.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void CreateSchedule ()
		{
			ToolBar.CreateSchedule.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void BatchRegisterDetails ()
		{
			ToolBar.BatchRegisterDetails.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void GLEditDetails ()
		{
			ToolBar.GLEditDetails.ClickAndWait();
			Browser.TraceErrors();
		}
		public virtual void GLReversingBatches ()
		{
			ToolBar.GLReversingBatches.ClickAndWait();
			Browser.TraceErrors();
		}
        
        public GL301000_JournalEntry() {
            ScreenId = "GL301000";
            ScreenUrl = "/Pages/GL/GL301000.aspx";
            ToolBar = new PxToolBar();
            batchmodule_form = new c_batchmodule_form("ctl00_phF_form", "BatchModule_form", null, null, "GL301000");
            firstselect_formactions = new c_firstselect_formactions("ctl00_usrCaption_CustomizationDialogs_PXSmartPanel1_FormActions", "FirstSelect_FormActions", null, null, "GL301000");
            vieweleminfo_formeleminfo = new c_vieweleminfo_formeleminfo("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo", "ViewElemInfo_FormElemInfo", null, null, "GL301000");
            filterworkingproject_formnewproject = new c_filterworkingproject_formnewproject("ctl00_usrCaption_CustomizationDialogs_DlgNewProject_FormNewProject", "FilterWorkingProject_FormNewProject", null, null, "GL301000");
            filterworkingproject_formselectproject = new c_filterworkingproject_formselectproject("ctl00_usrCaption_CustomizationDialogs_WizardSelectProject_FormSelectProject", "FilterWorkingProject_FormSelectProject", null, null, "GL301000");
            _batch_currencyinfo__rf = new c__batch_currencyinfo__rf("ctl00_phF_form_edCury_pnlRate_rf", "_Batch_CurrencyInfo__rf", null, null, "GL301000");
            gltranmodulebatnbr_lv0 = new c_gltranmodulebatnbr_lv0("ctl00_phG_grid_lv0", "GLTranModuleBatNbr_lv0", null, null, "GL301000");
            gltranmodulebatnbr_grid = new c_gltranmodulebatnbr_grid(c_gltranmodulebatnbr_grid.GridLocator, c_gltranmodulebatnbr_grid.GridName);
            gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings = new c_gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings("ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings", "GLTranModuleBatNbr$ImportCSVSettings_frmImportCSVSettings", null, null, "GL301000");
            gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings = new c_gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings("ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings", "GLTranModuleBatNbr$ImportXLSXSettings_frmImportXLSXSettings", null, null, "GL301000");
            gltranmodulebatnbr_importcolumns_grdimportcolumn = new c_gltranmodulebatnbr_importcolumns_grdimportcolumn(c_gltranmodulebatnbr_importcolumns_grdimportcolumn.GridLocator, c_gltranmodulebatnbr_importcolumns_grdimportcolumn.GridName);
            gltranmodulebatnbr_importcolumns_lv0 = new c_gltranmodulebatnbr_importcolumns_lv0("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0", "GLTranModuleBatNbr$ImportColumns_lv0", null, null, "GL301000");
        }
        
        protected virtual c_batchmodule_form BatchModule_form {
            get {
                return batchmodule_form;
            }
            set {
                batchmodule_form = value;
            }
        }
        
        protected virtual c_firstselect_formactions FirstSelect_FormActions {
            get {
                return firstselect_formactions;
            }
            set {
                firstselect_formactions = value;
            }
        }
        
        protected virtual c_vieweleminfo_formeleminfo ViewElemInfo_FormElemInfo {
            get {
                return vieweleminfo_formeleminfo;
            }
            set {
                vieweleminfo_formeleminfo = value;
            }
        }
        
        protected virtual c_filterworkingproject_formnewproject FilterWorkingProject_FormNewProject {
            get {
                return filterworkingproject_formnewproject;
            }
            set {
                filterworkingproject_formnewproject = value;
            }
        }
        
        protected virtual c_filterworkingproject_formselectproject FilterWorkingProject_FormSelectProject {
            get {
                return filterworkingproject_formselectproject;
            }
            set {
                filterworkingproject_formselectproject = value;
            }
        }
        
        protected virtual c__batch_currencyinfo__rf _Batch_CurrencyInfo__rf {
            get {
                return _batch_currencyinfo__rf;
            }
            set {
                _batch_currencyinfo__rf = value;
            }
        }
        
        protected virtual c_gltranmodulebatnbr_lv0 GLTranModuleBatNbr_lv0 {
            get {
                return gltranmodulebatnbr_lv0;
            }
            set {
                gltranmodulebatnbr_lv0 = value;
            }
        }
        
        protected virtual c_gltranmodulebatnbr_grid GLTranModuleBatNbr_grid {
            get {
                return gltranmodulebatnbr_grid;
            }
            set {
                gltranmodulebatnbr_grid = value;
            }
        }
        
        protected virtual c_gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings GLTranModuleBatNbr_ImportCSVSettings_frmImportCSVSettings {
            get {
                return gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings;
            }
            set {
                gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings = value;
            }
        }
        
        protected virtual c_gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings GLTranModuleBatNbr_ImportXLSXSettings_frmImportXLSXSettings {
            get {
                return gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings;
            }
            set {
                gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings = value;
            }
        }
        
        protected virtual c_gltranmodulebatnbr_importcolumns_grdimportcolumn GLTranModuleBatNbr_ImportColumns_grdImportColumn {
            get {
                return gltranmodulebatnbr_importcolumns_grdimportcolumn;
            }
            set {
                gltranmodulebatnbr_importcolumns_grdimportcolumn = value;
            }
        }
        
        protected virtual c_gltranmodulebatnbr_importcolumns_lv0 GLTranModuleBatNbr_ImportColumns_lv0 {
            get {
                return gltranmodulebatnbr_importcolumns_lv0;
            }
            set {
                gltranmodulebatnbr_importcolumns_lv0 = value;
            }
        }
        
        public class PxToolBar : PxControlCollection {
            
			public ToolBarButton ClearFilter {get;private set;}
			public ToolBarButton Note {get;private set;}
			public ToolBarButton ActivityShow {get;private set;}
			public ToolBarButton FilesMenuShow {get;private set;}
			public ToolBarButton Custom {get;private set;}
			public ToolBarButton SelectProject {get;private set;}
			public ToolBarButton InspectelementCtrlAtlClick {get;private set;}
			public ToolBarButton EditProject {get;private set;}
			public ToolBarButton ManageCustomizations {get;private set;}
			public ToolBarButton ActionNavigateAspx {get;private set;}
			public ToolBarButton ActionCreateNewProject {get;private set;}
			public ToolBarButton MenuLayoutEditor {get;private set;}
			public ToolBarButton MenuEditProj {get;private set;}
			public ToolBarButton MenuDacEditor {get;private set;}
			public ToolBarButton MenuGraphEditor {get;private set;}
			public ToolBarButton MenuLayoutSrc {get;private set;}
			public ToolBarButton MenuGraphSrc {get;private set;}
			public ToolBarButton MenuDacSrc {get;private set;}
			public ToolBarButton MenuLayoutVS {get;private set;}
			public ToolBarButton MenuDacVS {get;private set;}
			public ToolBarButton MenuGraphVS {get;private set;}
			public ToolBarButton ActionSelectWorkingProject {get;private set;}
			public ToolBarButton LongRun {get;private set;}
			public ToolBarButton ElapsedTime {get;private set;}
			public ToolBarButton Save {get;private set;}
			public ToolBarButton Cancel {get;private set;}
			public ToolBarButton Insert {get;private set;}
			public ToolBarButton Clipboard {get;private set;}
			public ToolBarButton Delete {get;private set;}
			public ToolBarButton First {get;private set;}
			public ToolBarButton Previous {get;private set;}
			public ToolBarButton Next {get;private set;}
			public ToolBarButton Last {get;private set;}
			public ToolBarButton Release {get;private set;}
			public ToolBarButton Actions {get;private set;}
			public ToolBarButton Reports {get;private set;}
			public ToolBarButton LongRun2 {get;private set;}
			public ToolBarButton ElapsedTime2 {get;private set;}
			public ToolBarButton CopyDocument {get;private set;}
			public ToolBarButton PasteDocument {get;private set;}
			public ToolBarButton SaveTemplate {get;private set;}
			public ToolBarButton #1 {get;private set;}
			public ToolBarButton ReverseBatch {get;private set;}
			public ToolBarButton CreateSchedule {get;private set;}
			public ToolBarButton BatchRegisterDetails {get;private set;}
			public ToolBarButton GLEditDetails {get;private set;}
			public ToolBarButton GLReversingBatches {get;private set;}
            
            public PxToolBar() {
                Initialize();
            }
            
            private void Initialize() {
                ClearFilter = new ToolBarButton("css=div[data-cmd='clearFilter']", "ClearFilter", "", null, "GL301000");
                Note = new ToolBarButton("css=div[data-cmd='NoteShow']", "Note", "", null, "GL301000");
                ActivityShow = new ToolBarButton("css=div[data-cmd='ActivityShow']", "ActivityShow", "", null, "GL301000");
                FilesMenuShow = new ToolBarButton("css=div[data-cmd='FilesMenuShow']", "FilesMenuShow", "", null, "GL301000");
                Custom = new ToolBarButton("css=div[data-cmd='Custom']", "Custom", "", null, "GL301000");
                SelectProject = new ToolBarButton("ctl00_usrCaption_CustomizationDialogs_PXToolBar1_menuCustom_item_0", "SelectProject", "", null, "GL301000");
                InspectelementCtrlAtlClick = new ToolBarButton("ctl00_usrCaption_CustomizationDialogs_PXToolBar1_menuCustom_item_1", "InspectelementCtrlAtlClick", "", null, "GL301000");
                EditProject = new ToolBarButton("ctl00_usrCaption_CustomizationDialogs_PXToolBar1_menuCustom_item_2", "EditProject", "", null, "GL301000");
                ManageCustomizations = new ToolBarButton("ctl00_usrCaption_CustomizationDialogs_PXToolBar1_menuCustom_item_3", "ManageCustomizations", "", null, "GL301000");
                ActionNavigateAspx = new ToolBarButton("css=div[data-cmd='actionNavigateAspx']", "ActionNavigateAspx", "", null, "GL301000");
                ActionCreateNewProject = new ToolBarButton("css=div[data-cmd='actionCreateNewProject']", "ActionCreateNewProject", "", null, "GL301000");
                MenuLayoutEditor = new ToolBarButton("css=div[data-cmd='menuLayoutEditor']", "MenuLayoutEditor", "", null, "GL301000");
                MenuEditProj = new ToolBarButton("css=div[data-cmd='menuEditProj']", "MenuEditProj", "", null, "GL301000");
                MenuDacEditor = new ToolBarButton("css=div[data-cmd='menuDacEditor']", "MenuDacEditor", "", null, "GL301000");
                MenuGraphEditor = new ToolBarButton("css=div[data-cmd='menuGraphEditor']", "MenuGraphEditor", "", null, "GL301000");
                MenuLayoutSrc = new ToolBarButton("css=div[data-cmd='menuLayoutSrc']", "MenuLayoutSrc", "", null, "GL301000");
                MenuGraphSrc = new ToolBarButton("css=div[data-cmd='menuGraphSrc']", "MenuGraphSrc", "", null, "GL301000");
                MenuDacSrc = new ToolBarButton("css=div[data-cmd='menuDacSrc']", "MenuDacSrc", "", null, "GL301000");
                MenuLayoutVS = new ToolBarButton("css=div[data-cmd='menuLayoutVS']", "MenuLayoutVS", "", null, "GL301000");
                MenuDacVS = new ToolBarButton("css=div[data-cmd='menuDacVS']", "MenuDacVS", "", null, "GL301000");
                MenuGraphVS = new ToolBarButton("css=div[data-cmd='menuGraphVS']", "MenuGraphVS", "", null, "GL301000");
                ActionSelectWorkingProject = new ToolBarButton("css=div[data-cmd='actionSelectWorkingProject']", "ActionSelectWorkingProject", "", null, "GL301000");
                LongRun = new ToolBarButton("css=div[data-cmd='LongRun']", "LongRun", "", null, "GL301000");
                ElapsedTime = new ToolBarButton("css=div[data-cmd='ElapsedTime']", "ElapsedTime", "", null, "GL301000");
                Save = new ToolBarButton("css=div[data-cmd='Save']", "Save", "", null, "GL301000");
                Cancel = new ToolBarButton("css=div[data-cmd='Cancel']", "Cancel", "", null, "GL301000");
                Insert = new ToolBarButton("css=div[data-cmd='Insert']", "Insert", "", null, "GL301000");
                Clipboard = new ToolBarButton("css=li>div.toolsBtn[tooltip='Clipboard']", "Clipboard", "", null, "GL301000");
                Delete = new ToolBarButton("css=div[data-cmd='Delete']", "Delete", "", null, "GL301000");
                Delete.ConfirmAction = () => Browser.Confirm(true);
                First = new ToolBarButton("css=div[data-cmd='First']", "First", "", null, "GL301000");
                Previous = new ToolBarButton("css=div[data-cmd='Previous']", "Previous", "", null, "GL301000");
                Next = new ToolBarButton("css=div[data-cmd='Next']", "Next", "", null, "GL301000");
                Last = new ToolBarButton("css=div[data-cmd='Last']", "Last", "", null, "GL301000");
                Release = new ToolBarButton("css=div[data-cmd='Release']", "Release", "", null, "GL301000");
                Actions = new ToolBarButton("css=div:contains('Actions') > div[data-type='drop']", "Actions", "", null, "GL301000");
                Reports = new ToolBarButton("css=div:contains('Reports') > div[data-type='drop']", "Reports", "", null, "GL301000");
                LongRun2 = new ToolBarButton("css=div[data-cmd='LongRun']", "LongRun2", "", null, "GL301000");
                ElapsedTime2 = new ToolBarButton("css=div[data-cmd='ElapsedTime']", "ElapsedTime2", "", null, "GL301000");
                CopyDocument = new ToolBarButton("css=li[data-cmd='CopyPaste@CopyDocument']", "CopyDocument", "", null, "GL301000");
                PasteDocument = new ToolBarButton("css=li[data-cmd='CopyPaste@PasteDocument']", "PasteDocument", "", null, "GL301000");
                SaveTemplate = new ToolBarButton("css=li[data-cmd='CopyPaste@SaveTemplate']", "SaveTemplate", "", null, "GL301000");
                #1 = new ToolBarButton("css=li[data-cmd='CopyPaste@#1']", "#1", "", null, "GL301000");
                ReverseBatch = new ToolBarButton("css=li[data-cmd='Action@ReverseBatch']", "ReverseBatch", "", null, "GL301000");
                CreateSchedule = new ToolBarButton("css=li[data-cmd='Action@CreateSchedule']", "CreateSchedule", "", null, "GL301000");
                BatchRegisterDetails = new ToolBarButton("css=li[data-cmd='Report@BatchRegisterDetails']", "BatchRegisterDetails", "", null, "GL301000");
                GLEditDetails = new ToolBarButton("css=li[data-cmd='Report@GLEditDetails']", "GLEditDetails", "", null, "GL301000");
                GLReversingBatches = new ToolBarButton("css=li[data-cmd='Report@GLReversingBatches']", "GLReversingBatches", "", null, "GL301000");
            }
        }
        
        public class c_batchmodule_form : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public DropDown Module {get;set;}
			public Selector BatchNbr {get;set;}
			public DropDown Status {get;set;}
			public CheckBox Hold {get;set;}
			public DateSelector DateEntered {get;set;}
			public Selector FinPeriodID {get;set;}
			public Selector BranchID {get;set;}
			public Selector LedgerID {get;set;}
			public Selector CuryID {get;set;}
			public CheckBox CuryViewState {get;set;}
			public CheckBox AutoReverse {get;set;}
			public CheckBox AutoReverseCopy {get;set;}
			public CheckBox CreateTaxTrans {get;set;}
			public Selector OrigBatchNbr {get;set;}
			public Input ReverseCount {get;set;}
			public Input CuryDebitTotal {get;set;}
			public Input CuryCreditTotal {get;set;}
			public Input CuryControlTotal {get;set;}
			public CheckBox SkipTaxValidation {get;set;}
			public Input Description {get;set;}
            
            public c_batchmodule_form(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_batchmodule_form(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Unnamed() {
                ActionClick(Buttons.Unnamed);
            }
            
            public virtual void Viewbase() {
                ActionClick(Buttons.Viewbase);
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            private void Initialize() {
                Module = new DropDown("ctl00_phF_form_edModule", "Module", "ctl00_phF_form", null, "GL301000");
                Module.DataField = "Module";
				Module.Items.Add("GL","GL");
				Module.Items.Add("AP","AP");
				Module.Items.Add("AR","AR");
				Module.Items.Add("CM","CM");
				Module.Items.Add("CA","CA");
				Module.Items.Add("IN","IN");
				Module.Items.Add("DR","DR");
				Module.Items.Add("FA","FA");
				Module.Items.Add("PM","PM");
				Module.Items.Add("PR","PR");
                BatchNbr = new Selector("ctl00_phF_form_edBatchNbr", "BatchNbr", "ctl00_phF_form", null, "GL301000");
                BatchNbr.DataField = "BatchNbr";
                Status = new DropDown("ctl00_phF_form_edStatus", "Status", "ctl00_phF_form", null, "GL301000");
                Status.DataField = "Status";
				Status.Items.Add("H","On Hold");
				Status.Items.Add("B","Balanced");
				Status.Items.Add("U","Unposted");
				Status.Items.Add("P","Posted");
				Status.Items.Add("C","Completed");
				Status.Items.Add("V","Voided");
				Status.Items.Add("R","Released");
				Status.Items.Add("Q","Partially Released");
				Status.Items.Add("S","Scheduled");
                Hold = new CheckBox("ctl00_phF_form_chkHold", "Hold", "ctl00_phF_form", null, "GL301000");
                Hold.DataField = "Hold";
                DateEntered = new DateSelector("ctl00_phF_form_edDateEntered", "DateEntered", "ctl00_phF_form", null, "GL301000");
                DateEntered.DataField = "DateEntered";
                FinPeriodID = new Selector("ctl00_phF_form_edFinPeriodID", "FinPeriodID", "ctl00_phF_form", null, "GL301000");
                FinPeriodID.DataField = "FinPeriodID";
                BranchID = new Selector("ctl00_phF_form_edBranchID", "BranchID", "ctl00_phF_form", null, "GL301000");
                BranchID.DataField = "BranchID";
                LedgerID = new Selector("ctl00_phF_form_edLedgerID", "LedgerID", "ctl00_phF_form", null, "GL301000");
                LedgerID.DataField = "LedgerID";
                CuryID = new Selector("ctl00_phF_form_edCury_cury", "CuryID", "ctl00_phF_form", null, "GL301000");
                CuryID.DataField = "CuryID";
                CuryViewState = new CheckBox("ctl00_phF_form_edCury_chk", "CuryViewState", "ctl00_phF_form", null, "GL301000");
                CuryViewState.DataField = "CuryViewState";
                AutoReverse = new CheckBox("ctl00_phF_form_chkAutoReverse", "AutoReverse", "ctl00_phF_form", null, "GL301000");
                AutoReverse.DataField = "AutoReverse";
                AutoReverseCopy = new CheckBox("ctl00_phF_form_AutoReverseCopy", "AutoReverseCopy", "ctl00_phF_form", null, "GL301000");
                AutoReverseCopy.DataField = "AutoReverseCopy";
                CreateTaxTrans = new CheckBox("ctl00_phF_form_chkCreateTaxTrans", "CreateTaxTrans", "ctl00_phF_form", null, "GL301000");
                CreateTaxTrans.DataField = "CreateTaxTrans";
                OrigBatchNbr = new Selector("ctl00_phF_form_edOrigBatchNbr", "OrigBatchNbr", "ctl00_phF_form", null, "GL301000");
                OrigBatchNbr.DataField = "OrigBatchNbr";
                ReverseCount = new Input("ctl00_phF_form_edReverseCount", "ReverseCount", "ctl00_phF_form", null, "GL301000");
                ReverseCount.DataField = "ReverseCount";
                CuryDebitTotal = new Input("ctl00_phF_form_edCuryDebitTotal", "CuryDebitTotal", "ctl00_phF_form", null, "GL301000");
                CuryDebitTotal.DataField = "CuryDebitTotal";
                CuryCreditTotal = new Input("ctl00_phF_form_edCuryCreditTotal", "CuryCreditTotal", "ctl00_phF_form", null, "GL301000");
                CuryCreditTotal.DataField = "CuryCreditTotal";
                CuryControlTotal = new Input("ctl00_phF_form_edCuryControlTotal", "CuryControlTotal", "ctl00_phF_form", null, "GL301000");
                CuryControlTotal.DataField = "CuryControlTotal";
                SkipTaxValidation = new CheckBox("ctl00_phF_form_chkSkipTaxValidation", "SkipTaxValidation", "ctl00_phF_form", null, "GL301000");
                SkipTaxValidation.DataField = "SkipTaxValidation";
                Description = new Input("ctl00_phF_form_edDescription", "Description", "ctl00_phF_form", null, "GL301000");
                Description.DataField = "Description";
                ContainerType = "U";
                DataMemberName = "BatchModule";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Unnamed {get;private set;}
				public Button Viewbase {get;private set;}
				public Button Ok {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Unnamed = new Button("ctl00_phF_form_edCury_rateB", "", null, null, "GL301000");
                    Viewbase = new Button("ctl00_phF_form_edCury_curyB", "", null, null, "GL301000");
                    Ok = new Button("ctl00_phF_form_edCury_pnlRate_btnOk", "", null, null, "GL301000");
                }
            }
        }
        
        public class c_firstselect_formactions : Container {
            
			public Input Key {get;set;}
            
            public c_firstselect_formactions(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_firstselect_formactions(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            private void Initialize() {
                Key = new Input("ctl00_usrCaption_CustomizationDialogs_PXSmartPanel1_FormActions_edKey", "Key", "ctl00_usrCaption_CustomizationDialogs_PXSmartPanel1_FormActions", null, "GL301000");
                Key.DataField = "Key";
                ContainerType = "U";
                DataMemberName = "FirstSelect";
            }
        }
        
        public class c_vieweleminfo_formeleminfo : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public Input AspxControl {get;set;}
			public Input CacheType {get;set;}
			public Input FieldName {get;set;}
			public Input GraphName {get;set;}
            
            public c_vieweleminfo_formeleminfo(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_vieweleminfo_formeleminfo(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Customize() {
                ActionClick(Buttons.Customize);
            }
            
            public virtual void Actions() {
                ActionClick(Buttons.Actions);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            private void Initialize() {
                AspxControl = new Input("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo_edAspxControl", "AspxControl", "ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo", null, "GL301000");
                AspxControl.DataField = "AspxControl";
                CacheType = new Input("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo_CacheType", "CacheType", "ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo", null, "GL301000");
                CacheType.DataField = "CacheType";
                FieldName = new Input("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo_FieldName", "FieldName", "ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo", null, "GL301000");
                FieldName.DataField = "FieldName";
                GraphName = new Input("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo_GraphName", "GraphName", "ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_FormElemInfo", null, "GL301000");
                GraphName.DataField = "GraphName";
                ContainerType = "U";
                DataMemberName = "ViewElemInfo";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Customize {get;private set;}
				public Button Actions {get;private set;}
				public Button Cancel {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Customize = new Button("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_PXButton3", "", null, null, "GL301000");
                    Actions = new Button("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_ButtonGraphActions", "", null, null, "GL301000");
                    Cancel = new Button("ctl00_usrCaption_CustomizationDialogs_PanelElemInfo_PXButton4", "", null, null, "GL301000");
                }
            }
        }
        
        public class c_filterworkingproject_formnewproject : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public Input NewProject {get;set;}
            
            public c_filterworkingproject_formnewproject(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_filterworkingproject_formnewproject(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            private void Initialize() {
                NewProject = new Input("ctl00_usrCaption_CustomizationDialogs_DlgNewProject_FormNewProject_edNewProject", "NewProject", "ctl00_usrCaption_CustomizationDialogs_DlgNewProject_FormNewProject", null, "GL301000");
                NewProject.DataField = "NewProject";
                ContainerType = "U";
                DataMemberName = "FilterWorkingProject";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Ok {get;private set;}
				public Button Cancel {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Ok = new Button("ctl00_usrCaption_CustomizationDialogs_DlgNewProject_DlgNewProjectButtonOk", "", null, null, "GL301000");
                    Cancel = new Button("ctl00_usrCaption_CustomizationDialogs_DlgNewProject_DlgNewProjectButtonCancel", "", null, null, "GL301000");
                }
            }
        }
        
        public class c_filterworkingproject_formselectproject : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public Selector Name {get;set;}
            
            public c_filterworkingproject_formselectproject(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_filterworkingproject_formselectproject(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            public virtual void New() {
                ActionClick(Buttons.New);
            }
            
            private void Initialize() {
                Name = new Selector("ctl00_usrCaption_CustomizationDialogs_WizardSelectProject_FormSelectProject_edWP", "Name", "ctl00_usrCaption_CustomizationDialogs_WizardSelectProject_FormSelectProject", null, "GL301000");
                Name.DataField = "Name";
                ContainerType = "U";
                DataMemberName = "FilterWorkingProject";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Ok {get;private set;}
				public Button Cancel {get;private set;}
				public Button New {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Ok = new Button("ctl00_usrCaption_CustomizationDialogs_WizardSelectProject_SelectProjectOk", "", null, null, "GL301000");
                    Cancel = new Button("ctl00_usrCaption_CustomizationDialogs_WizardSelectProject_SelectProjectCancel", "", null, null, "GL301000");
                    New = new Button("ctl00_usrCaption_CustomizationDialogs_WizardSelectProject_BtnNewProject", "", null, null, "GL301000");
                }
            }
        }
        
        public class c__batch_currencyinfo__rf : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public Selector CuryRateTypeID {get;set;}
			public DateSelector CuryEffDate {get;set;}
			public Input DisplayCuryID {get;set;}
			public Input BaseCuryID {get;set;}
			public Input SampleCuryRate {get;set;}
			public Input SampleRecipRate {get;set;}
			public Input DisplayCuryID2 {get;set;}
			public Input BaseCuryID2 {get;set;}
            
            public c__batch_currencyinfo__rf(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c__batch_currencyinfo__rf(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            private void Initialize() {
                CuryRateTypeID = new Selector("ctl00_phF_form_edCury_pnlRate_rf_edRateType", "CuryRateTypeID", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                CuryRateTypeID.DataField = "CuryRateTypeID";
                CuryEffDate = new DateSelector("ctl00_phF_form_edCury_pnlRate_rf_edEffDate", "CuryEffDate", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                CuryEffDate.DataField = "CuryEffDate";
                DisplayCuryID = new Input("ctl00_phF_form_edCury_pnlRate_rf_txtCury", "DisplayCuryID", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                DisplayCuryID.DataField = "DisplayCuryID";
                BaseCuryID = new Input("ctl00_phF_form_edCury_pnlRate_rf_txtBaseCury", "BaseCuryID", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                BaseCuryID.DataField = "BaseCuryID";
                SampleCuryRate = new Input("ctl00_phF_form_edCury_pnlRate_rf_txtCuryRate", "SampleCuryRate", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                SampleCuryRate.DataField = "SampleCuryRate";
                SampleRecipRate = new Input("ctl00_phF_form_edCury_pnlRate_rf_txtCuryRate2", "SampleRecipRate", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                SampleRecipRate.DataField = "SampleRecipRate";
                DisplayCuryID2 = new Input("ctl00_phF_form_edCury_pnlRate_rf_txtCury2", "DisplayCuryID2", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                DisplayCuryID2.DataField = "DisplayCuryID";
                BaseCuryID2 = new Input("ctl00_phF_form_edCury_pnlRate_rf_txtBaseCury2", "BaseCuryID2", "ctl00_phF_form_edCury_pnlRate_rf", null, "GL301000");
                BaseCuryID2.DataField = "BaseCuryID";
                ContainerType = "U";
                DataMemberName = "_Batch_CurrencyInfo_";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Ok {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Ok = new Button("ctl00_phF_form_edCury_pnlRate_btnOk", "", null, null, "GL301000");
                }
            }
        }
        
        public class c_gltranmodulebatnbr_lv0 : Container {
            
			public Selector BranchID {get;set;}
			public Selector AccountID {get;set;}
			public Selector SubID {get;set;}
			public Input RefNbr {get;set;}
			public DateSelector TranDate {get;set;}
			public Selector UOM {get;set;}
			public Input Qty {get;set;}
			public Input CuryDebitAmt {get;set;}
			public Input CuryCreditAmt {get;set;}
			public Selector ProjectID {get;set;}
			public Selector TaskID {get;set;}
			public Selector ReferenceID {get;set;}
			public Selector InventoryID {get;set;}
			public Selector LedgerID {get;set;}
			public Selector TaxID {get;set;}
			public Input TranDesc {get;set;}
			public Selector Es {get;set;}
			public Input Module {get;set;}
			public Input BatchNbr {get;set;}
			public Input LineNbr {get;set;}
            
            public c_gltranmodulebatnbr_lv0(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_gltranmodulebatnbr_lv0(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            private void Initialize() {
                BranchID = new Selector("ctl00_phG_grid_lv0_edBranchID", "BranchID", "ctl00_phG_grid_lv0", null, "GL301000");
                BranchID.DataField = "BranchID";
                AccountID = new Selector("ctl00_phG_grid_lv0_edAccountID", "AccountID", "ctl00_phG_grid_lv0", null, "GL301000");
                AccountID.DataField = "AccountID";
                SubID = new Selector("ctl00_phG_grid_lv0_edSubID", "SubID", "ctl00_phG_grid_lv0", null, "GL301000");
                SubID.DataField = "SubID";
                RefNbr = new Input("ctl00_phG_grid_lv0_edRefNbr", "RefNbr", "ctl00_phG_grid_lv0", null, "GL301000");
                RefNbr.DataField = "RefNbr";
                TranDate = new DateSelector("ctl00_phG_grid_lv0_edTranDate", "TranDate", "ctl00_phG_grid_lv0", null, "GL301000");
                TranDate.DataField = "TranDate";
                UOM = new Selector("ctl00_phG_grid_lv0_edUOM", "UOM", "ctl00_phG_grid_lv0", null, "GL301000");
                UOM.DataField = "UOM";
                Qty = new Input("ctl00_phG_grid_lv0_edQty", "Qty", "ctl00_phG_grid_lv0", null, "GL301000");
                Qty.DataField = "Qty";
                CuryDebitAmt = new Input("ctl00_phG_grid_lv0_edCuryDebitAmt", "CuryDebitAmt", "ctl00_phG_grid_lv0", null, "GL301000");
                CuryDebitAmt.DataField = "CuryDebitAmt";
                CuryCreditAmt = new Input("ctl00_phG_grid_lv0_edCuryCreditAmt", "CuryCreditAmt", "ctl00_phG_grid_lv0", null, "GL301000");
                CuryCreditAmt.DataField = "CuryCreditAmt";
                ProjectID = new Selector("ctl00_phG_grid_lv0_edProjectID", "ProjectID", "ctl00_phG_grid_lv0", null, "GL301000");
                ProjectID.DataField = "ProjectID";
                TaskID = new Selector("ctl00_phG_grid_lv0_edTaskID", "TaskID", "ctl00_phG_grid_lv0", null, "GL301000");
                TaskID.DataField = "TaskID";
                ReferenceID = new Selector("ctl00_phG_grid_lv0_edReferenceID", "ReferenceID", "ctl00_phG_grid_lv0", null, "GL301000");
                ReferenceID.DataField = "ReferenceID";
                InventoryID = new Selector("ctl00_phG_grid_lv0_edInventoryID", "InventoryID", "ctl00_phG_grid_lv0", null, "GL301000");
                InventoryID.DataField = "InventoryID";
                LedgerID = new Selector("ctl00_phG_grid_lv0_edLedger", "LedgerID", "ctl00_phG_grid_lv0", null, "GL301000");
                LedgerID.DataField = "LedgerID";
                TaxID = new Selector("ctl00_phG_grid_lv0_edTaxID", "TaxID", "ctl00_phG_grid_lv0", null, "GL301000");
                TaxID.DataField = "TaxID";
                TranDesc = new Input("ctl00_phG_grid_lv0_edTranDesc", "TranDesc", "ctl00_phG_grid_lv0", null, "GL301000");
                TranDesc.DataField = "TranDesc";
                Es = new Selector("ctl00_phG_grid_lv0_es", "Es", "ctl00_phG_grid_lv0", null, "GL301000");
                Es.DataField = "";
                Module = new Input("ctl00_phG_grid_lv0_edModule", "Module", "ctl00_phG_grid_lv0", null, "GL301000");
                Module.DataField = "Module";
                BatchNbr = new Input("ctl00_phG_grid_lv0_edBatchNbr", "BatchNbr", "ctl00_phG_grid_lv0", null, "GL301000");
                BatchNbr.DataField = "BatchNbr";
                LineNbr = new Input("ctl00_phG_grid_lv0_edLineNbr", "LineNbr", "ctl00_phG_grid_lv0", null, "GL301000");
                LineNbr.DataField = "LineNbr";
                ContainerType = "U";
                DataMemberName = "GLTranModuleBatNbr";
            }
        }
        
        public class c_gltranmodulebatnbr_grid : Grid<c_gltranmodulebatnbr_grid.c_grid_row> {
            
            private static String _GridLocator = "ctl00_phG_grid";
            
            private static String _GridName = "GLTranModuleBatNbr_grid";
            
            private c_grid_filter_ex gridfilter;
            
            private c_grid_upload gridupload;
            
            public PxToolBar ToolBar {get;set;} //;
            
            public Selector ContextSearch;
            
		    public virtual void New()
		    {
			    if(ToolBar.New.IsEnabled())
			    {
				    ToolBar.New.ClickAndWait();
				    if (Browser.GetBrowser().Alert != null)
				    {
 					    throw new Exception("ALERT: " + Browser.GetBrowser().Alert.Message); 
				    }
			    }
		    }
            
            public c_gltranmodulebatnbr_grid(String locator, String name) : 
                    base(locator, name) {
                gridfilter = new c_grid_filter_ex("ctl00_phG_grid_fe_gf", null, null, null, "GL301000");
                gridupload = new c_grid_upload("ctl00_phG_grid_upldr", "Files Upload", null, null, "GL301000");
                ToolBar = new PxToolBar();
                ContextSearch = new Selector("ctl00_phG_grid_ab_tlb_fb", "ContextSearch", "ctl00_phG_grid", null, "GL301000");
                ContainerType = "U";
                DataMemberName = "GLTranModuleBatNbr";
            }
            
            public static String GridLocator {
                get {
                    return _GridLocator;
                }
                set {
                    _GridLocator = value;
                }
            }
            
            public static String GridName {
                get {
                    return _GridName;
                }
                set {
                    _GridName = value;
                }
            }
            
            public virtual c_grid_filter_ex FilterForm {
                get {
                    c_grid_filter.Lctr = _GridLocator;
                    return gridfilter;
                }
                set {
                    c_grid_filter.Lctr = _GridLocator;
                    gridfilter = value;
                }
            }
            
            public virtual c_grid_upload UploadForm {
                get {
                    return gridupload;
                }
                set {
                    gridupload = value;
                }
            }
            
            public virtual void Refresh() {
                ActionClick(ToolBar.Refresh);
            }
            
            public virtual void FormView() {
                ActionClick(ToolBar.FormView);
            }
            
            public virtual void Delete() {
                ActionClick(ToolBar.Delete);
            }
            
            public virtual void ViewDocument() {
                ActionClick(ToolBar.ViewDocument);
            }
            
            public virtual void Adjust() {
                ActionClick(ToolBar.Adjust);
            }
            
            public virtual void Export() {
                ActionClick(ToolBar.Export);
            }
            
            public virtual void Upload() {
                ActionClick(ToolBar.Upload);
            }
            
            public virtual void FilterBar() {
                ActionClick(ToolBar.FilterBar);
            }
            
            public virtual void PageFirst() {
                ActionClick(ToolBar.PageFirst);
            }
            
            public virtual void PagePrev() {
                ActionClick(ToolBar.PagePrev);
            }
            
            public virtual void PageNext() {
                ActionClick(ToolBar.PageNext);
            }
            
            public virtual void PageLast() {
                ActionClick(ToolBar.PageLast);
            }
            
            public class c_grid_filter_ex : c_grid_filter {
                
                private c_fields fields;
                
                public c_grid_filter_ex(String locator) : 
                        base(locator) {
                    fields = new c_fields();
                }
                
                public c_grid_filter_ex(String locator, String name, String tabid, int? index, String screenId) : 
                        base(locator, name, tabid, index, screenId) {
                    fields = new c_fields();
                }
                
                public virtual c_fields Fields {
                    get {
                        return fields;
                    }
                    set {
                        fields = value;
                    }
                }
                
                public class c_fields {
                    
                    public c_rule.c_property Files;
                    
                    public c_rule.c_property Notes;
                    
                    public c_rule.c_property LineNbr;
                    
                    public c_rule.c_property BranchID;
                    
                    public c_rule.c_property AccountID;
                    
                    public c_rule.c_property AccountID_Account_description;
                    
                    public c_rule.c_property SubID;
                    
                    public c_rule.c_property ProjectID;
                    
                    public c_rule.c_property TaskID;
                    
                    public c_rule.c_property RefNbr;
                    
                    public c_rule.c_property TranDate;
                    
                    public c_rule.c_property Qty;
                    
                    public c_rule.c_property UOM;
                    
                    public c_rule.c_property CuryDebitAmt;
                    
                    public c_rule.c_property CuryCreditAmt;
                    
                    public c_rule.c_property TranDesc;
                    
                    public c_rule.c_property InventoryID;
                    
                    public c_rule.c_property LedgerID;
                    
                    public c_rule.c_property ReferenceID;
                    
                    public c_rule.c_property TaxID;
                    
                    public c_rule.c_property TaxCategoryID;
                    
                    public c_rule.c_property NonBillable;
                    
                    public c_rule.c_property Module;
                    
                    public c_rule.c_property BatchNbr;
                    
                    public c_fields() {
                        Files = new c_rule.c_property("", "Int32", "PX.Web.UI.PXSelector", 2, "GL301000");
                        Notes = new c_rule.c_property("", "Int32", "PX.Web.UI.PXSelector", 3, "GL301000");
                        LineNbr = new c_rule.c_property("Line Nbr.", "Int32", "PX.Web.UI.PXNumberEdit", 4, "GL301000");
                        BranchID = new c_rule.c_property("Branch", "String", "PX.Web.UI.PXSegmentMask", 5, "GL301000");
                        AccountID = new c_rule.c_property("Account", "String", "PX.Web.UI.PXSegmentMask", 6, "GL301000");
                        AccountID_Account_description = new c_rule.c_property("Description", "String", "PX.Web.UI.PXTextEdit", 7, "GL301000");
                        SubID = new c_rule.c_property("Subaccount", "String", "PX.Web.UI.PXSegmentMask", 8, "GL301000");
                        ProjectID = new c_rule.c_property("Project", "String", "PX.Web.UI.PXSegmentMask", 9, "GL301000");
                        TaskID = new c_rule.c_property("Project Task", "String", "PX.Web.UI.PXSegmentMask", 10, "GL301000");
                        RefNbr = new c_rule.c_property("Ref. Number", "String", "PX.Web.UI.PXTextEdit", 11, "GL301000");
                        TranDate = new c_rule.c_property("Transaction Date", "DateTime", "PX.Web.UI.PXDateTimeEdit", 12, "GL301000");
                        Qty = new c_rule.c_property("Quantity", "Decimal", "PX.Web.UI.PXNumberEdit", 13, "GL301000");
                        UOM = new c_rule.c_property("UOM", "String", "PX.Web.UI.PXSelector", 14, "GL301000");
                        CuryDebitAmt = new c_rule.c_property("Debit Amount", "Decimal", "PX.Web.UI.PXNumberEdit", 15, "GL301000");
                        CuryCreditAmt = new c_rule.c_property("Credit Amount", "Decimal", "PX.Web.UI.PXNumberEdit", 16, "GL301000");
                        TranDesc = new c_rule.c_property("Transaction Description", "String", "PX.Web.UI.PXTextEdit", 17, "GL301000");
                        InventoryID = new c_rule.c_property("Inventory ID", "String", "PX.Web.UI.PXSegmentMask", 18, "GL301000");
                        LedgerID = new c_rule.c_property("Ledger", "String", "PX.Web.UI.PXSegmentMask", 19, "GL301000");
                        ReferenceID = new c_rule.c_property("Customer/Vendor", "String", "PX.Web.UI.PXSegmentMask", 20, "GL301000");
                        TaxID = new c_rule.c_property("Tax ID", "String", "PX.Web.UI.PXSelector", 21, "GL301000");
                        TaxCategoryID = new c_rule.c_property("Tax Category", "String", "PX.Web.UI.PXSelector", 22, "GL301000");
                        NonBillable = new c_rule.c_property("Non Billable", "Boolean", "PX.Web.UI.PXCheckBox", 23, "GL301000");
                        Module = new c_rule.c_property("Module", "String", "PX.Web.UI.PXTextEdit", 24, "GL301000");
                        BatchNbr = new c_rule.c_property("Batch Number", "String", "PX.Web.UI.PXTextEdit", 25, "GL301000");
                    }
                }
            }
            
            public class PxToolBar : PxControlCollection {
                
				public ToolBarButton Refresh {get;private set;}
				public ToolBarButton New {get;private set;}
				public ToolBarButton FormView {get;private set;}
				public ToolBarButton Delete {get;private set;}
				public ToolBarButton ViewDocument {get;private set;}
				public ToolBarButton Adjust {get;private set;}
				public ToolBarButton Export {get;private set;}
				public ToolBarButton Upload {get;private set;}
				public ToolBarButton FilterBar {get;private set;}
				public ToolBarButton PageFirst {get;private set;}
				public ToolBarButton PagePrev {get;private set;}
				public ToolBarButton PageNext {get;private set;}
				public ToolBarButton PageLast {get;private set;}
                
                public PxToolBar() {
                    Initialize();
                }
                
                private void Initialize() {
                    Refresh = new ToolBarButton("css=div[data-cmd='Refresh']", "Refresh", "ctl00_phG_grid", null, "GL301000");
                    New = new ToolBarButton("css=div[data-cmd='AddNew']", "New", "ctl00_phG_grid", null, "GL301000");
                    FormView = new ToolBarButton("css=div[data-cmd='EditRecord']", "FormView", "ctl00_phG_grid", null, "GL301000");
                    Delete = new ToolBarButton("css=div[data-cmd='Delete']", "Delete", "ctl00_phG_grid", null, "GL301000");
                    ViewDocument = new ToolBarButton("css=div[data-cmd='ViewDocument']", "ViewDocument", "ctl00_phG_grid", null, "GL301000");
                    Adjust = new ToolBarButton("css=div[data-cmd='AdjustColumns']", "Adjust", "ctl00_phG_grid", null, "GL301000");
                    Export = new ToolBarButton("css=div[data-cmd='ExportExcel']", "Export", "ctl00_phG_grid", null, "GL301000");
                    Upload = new ToolBarButton("css=div[data-cmd='Upload']", "Upload", "ctl00_phG_grid", null, "GL301000");
                    PageFirst = new ToolBarButton("css=div[data-cmd='PageFirst']", "PageFirst", "ctl00_phG_grid", null, "GL301000");
                    PagePrev = new ToolBarButton("css=div[data-cmd='PagePrev']", "PagePrev", "ctl00_phG_grid", null, "GL301000");
                    PageNext = new ToolBarButton("css=div[data-cmd='PageNext']", "PageNext", "ctl00_phG_grid", null, "GL301000");
                    PageLast = new ToolBarButton("css=div[data-cmd='PageLast']", "PageLast", "ctl00_phG_grid", null, "GL301000");
                }
            }
            
            public class c_grid_row {
                
				public Selector Files {get;set;}
				public Selector Notes {get;set;}
				public Input LineNbr {get;set;}
				public Selector BranchID {get;set;}
				public Selector AccountID {get;set;}
				public Input AccountID_Account_description {get;set;}
				public Selector SubID {get;set;}
				public Selector ProjectID {get;set;}
				public Selector TaskID {get;set;}
				public Input RefNbr {get;set;}
				public DateSelector TranDate {get;set;}
				public Input Qty {get;set;}
				public Selector UOM {get;set;}
				public Input CuryDebitAmt {get;set;}
				public Input CuryCreditAmt {get;set;}
				public Input TranDesc {get;set;}
				public Selector InventoryID {get;set;}
				public Selector LedgerID {get;set;}
				public Selector ReferenceID {get;set;}
				public Selector TaxID {get;set;}
				public Selector TaxCategoryID {get;set;}
				public CheckBox NonBillable {get;set;}
				public Input Module {get;set;}
				public Input BatchNbr {get;set;}
                
                public c_grid_row() {
                    Files = new Selector("_ctl00_phG_grid_lv0_es", "", "ctl00_phG_grid", 2, "GL301000");
                    Files.DataField = "";
                    Files.ValueType = "PX.Web.UI.PXSelector";
                    Notes = new Selector("_ctl00_phG_grid_lv0_es", "", "ctl00_phG_grid", 3, "GL301000");
                    Notes.DataField = "";
                    Notes.ValueType = "PX.Web.UI.PXSelector";
                    LineNbr = new Input("_ctl00_phG_grid_lv0_edLineNbr", "Line Nbr.", "ctl00_phG_grid", 4, "GL301000");
                    LineNbr.DataField = "LineNbr";
                    LineNbr.ValueType = "PX.Web.UI.PXNumberEdit";
                    BranchID = new Selector("_ctl00_phG_grid_lv0_edBranchID", "Branch", "ctl00_phG_grid", 5, "GL301000");
                    BranchID.DataField = "BranchID";
                    BranchID.ValueType = "PX.Web.UI.PXSegmentMask";
                    AccountID = new Selector("_ctl00_phG_grid_lv0_edAccountID", "Account", "ctl00_phG_grid", 6, "GL301000");
                    AccountID.DataField = "AccountID";
                    AccountID.ValueType = "PX.Web.UI.PXSegmentMask";
                    AccountID_Account_description = new Input("ctl00_phG_grid_ei", "Description", "ctl00_phG_grid", 7, "GL301000");
                    AccountID_Account_description.DataField = "AccountID_Account_description";
                    AccountID_Account_description.ValueType = "PX.Web.UI.PXTextEdit";
                    SubID = new Selector("_ctl00_phG_grid_lv0_edSubID", "Subaccount", "ctl00_phG_grid", 8, "GL301000");
                    SubID.DataField = "SubID";
                    SubID.ValueType = "PX.Web.UI.PXSegmentMask";
                    ProjectID = new Selector("_ctl00_phG_grid_lv0_edProjectID", "Project", "ctl00_phG_grid", 9, "GL301000");
                    ProjectID.DataField = "ProjectID";
                    ProjectID.ValueType = "PX.Web.UI.PXSegmentMask";
                    TaskID = new Selector("_ctl00_phG_grid_lv0_edTaskID", "Project Task", "ctl00_phG_grid", 10, "GL301000");
                    TaskID.DataField = "TaskID";
                    TaskID.ValueType = "PX.Web.UI.PXSegmentMask";
                    RefNbr = new Input("_ctl00_phG_grid_lv0_edRefNbr", "Ref. Number", "ctl00_phG_grid", 11, "GL301000");
                    RefNbr.DataField = "RefNbr";
                    RefNbr.ValueType = "PX.Web.UI.PXTextEdit";
                    TranDate = new DateSelector("_ctl00_phG_grid_lv0_edTranDate", "Transaction Date", "ctl00_phG_grid", 12, "GL301000");
                    TranDate.DataField = "TranDate";
                    TranDate.ValueType = "PX.Web.UI.PXDateTimeEdit";
                    Qty = new Input("_ctl00_phG_grid_lv0_edQty", "Quantity", "ctl00_phG_grid", 13, "GL301000");
                    Qty.DataField = "Qty";
                    Qty.ValueType = "PX.Web.UI.PXNumberEdit";
                    UOM = new Selector("_ctl00_phG_grid_lv0_edUOM", "UOM", "ctl00_phG_grid", 14, "GL301000");
                    UOM.DataField = "UOM";
                    UOM.ValueType = "PX.Web.UI.PXSelector";
                    CuryDebitAmt = new Input("_ctl00_phG_grid_lv0_edCuryDebitAmt", "Debit Amount", "ctl00_phG_grid", 15, "GL301000");
                    CuryDebitAmt.DataField = "CuryDebitAmt";
                    CuryDebitAmt.ValueType = "PX.Web.UI.PXNumberEdit";
                    CuryCreditAmt = new Input("_ctl00_phG_grid_lv0_edCuryCreditAmt", "Credit Amount", "ctl00_phG_grid", 16, "GL301000");
                    CuryCreditAmt.DataField = "CuryCreditAmt";
                    CuryCreditAmt.ValueType = "PX.Web.UI.PXNumberEdit";
                    TranDesc = new Input("_ctl00_phG_grid_lv0_edTranDesc", "Transaction Description", "ctl00_phG_grid", 17, "GL301000");
                    TranDesc.DataField = "TranDesc";
                    TranDesc.ValueType = "PX.Web.UI.PXTextEdit";
                    InventoryID = new Selector("_ctl00_phG_grid_lv0_edInventoryID", "Inventory ID", "ctl00_phG_grid", 18, "GL301000");
                    InventoryID.DataField = "InventoryID";
                    InventoryID.ValueType = "PX.Web.UI.PXSegmentMask";
                    LedgerID = new Selector("_ctl00_phG_grid_lv0_edLedger", "Ledger", "ctl00_phG_grid", 19, "GL301000");
                    LedgerID.DataField = "LedgerID";
                    LedgerID.ValueType = "PX.Web.UI.PXSegmentMask";
                    ReferenceID = new Selector("_ctl00_phG_grid_lv0_edReferenceID", "Customer/Vendor", "ctl00_phG_grid", 20, "GL301000");
                    ReferenceID.DataField = "ReferenceID";
                    ReferenceID.ValueType = "PX.Web.UI.PXSegmentMask";
                    TaxID = new Selector("_ctl00_phG_grid_lv0_edTaxID", "Tax ID", "ctl00_phG_grid", 21, "GL301000");
                    TaxID.DataField = "TaxID";
                    TaxID.ValueType = "PX.Web.UI.PXSelector";
                    TaxCategoryID = new Selector("_ctl00_phG_grid_lv0_es", "Tax Category", "ctl00_phG_grid", 22, "GL301000");
                    TaxCategoryID.DataField = "TaxCategoryID";
                    TaxCategoryID.ValueType = "PX.Web.UI.PXSelector";
                    NonBillable = new CheckBox("ctl00_phG_grid_ef", "Non Billable", "ctl00_phG_grid", 23, "GL301000");
                    NonBillable.DataField = "NonBillable";
                    NonBillable.ValueType = "PX.Web.UI.PXCheckBox";
                    Module = new Input("_ctl00_phG_grid_lv0_edModule", "Module", "ctl00_phG_grid", 24, "GL301000");
                    Module.DataField = "Module";
                    Module.ValueType = "PX.Web.UI.PXTextEdit";
                    BatchNbr = new Input("_ctl00_phG_grid_lv0_edBatchNbr", "Batch Number", "ctl00_phG_grid", 25, "GL301000");
                    BatchNbr.DataField = "BatchNbr";
                    BatchNbr.ValueType = "PX.Web.UI.PXTextEdit";
                }
            }
        }
        
        public class c_gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public Input Separator {get;set;}
			public Input NullValue {get;set;}
			public DropDown CodePage {get;set;}
			public DropDown Culture {get;set;}
			public CheckBox OnlyInsert {get;set;}
            
            public c_gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_gltranmodulebatnbr_importcsvsettings_frmimportcsvsettings(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            private void Initialize() {
                Separator = new Input("ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings_edSeparator", "Separator", "ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings", null, "GL301000");
                Separator.DataField = "Separator";
                NullValue = new Input("ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings_edNullValue", "NullValue", "ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings", null, "GL301000");
                NullValue.DataField = "NullValue";
                CodePage = new DropDown("ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings_edCodePage", "CodePage", "ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings", null, "GL301000");
                CodePage.DataField = "CodePage";
                Culture = new DropDown("ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings_edCultures", "Culture", "ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings", null, "GL301000");
                Culture.DataField = "Culture";
                OnlyInsert = new CheckBox("ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings_edOnlyInsert", "OnlyInsert", "ctl00_phG_grid_imp_importCSVSettingsDlg_frmImportCSVSettings", null, "GL301000");
                OnlyInsert.DataField = "OnlyInsert";
                ContainerType = "U";
                DataMemberName = "GLTranModuleBatNbr$ImportCSVSettings";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Ok {get;private set;}
				public Button Cancel {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Ok = new Button("ctl00_phG_grid_imp_importCSVSettingsDlg_btnSave1", "", null, null, "GL301000");
                    Cancel = new Button("ctl00_phG_grid_imp_importCSVSettingsDlg_btnCancel1", "", null, null, "GL301000");
                }
            }
        }
        
        public class c_gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public Input NullValue {get;set;}
			public DropDown Culture {get;set;}
			public CheckBox OnlyInsert {get;set;}
            
            public c_gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_gltranmodulebatnbr_importxlsxsettings_frmimportxlsxsettings(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            private void Initialize() {
                NullValue = new Input("ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings_edNullValue", "NullValue", "ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings", null, "GL301000");
                NullValue.DataField = "NullValue";
                Culture = new DropDown("ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings_edCultures", "Culture", "ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings", null, "GL301000");
                Culture.DataField = "Culture";
                OnlyInsert = new CheckBox("ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings_edOnlyInsert", "OnlyInsert", "ctl00_phG_grid_imp_importXLSXSettingsDlg_frmImportXLSXSettings", null, "GL301000");
                OnlyInsert.DataField = "OnlyInsert";
                ContainerType = "U";
                DataMemberName = "GLTranModuleBatNbr$ImportXLSXSettings";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button Ok {get;private set;}
				public Button Cancel {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    Ok = new Button("ctl00_phG_grid_imp_importXLSXSettingsDlg_btnSave2", "", null, null, "GL301000");
                    Cancel = new Button("ctl00_phG_grid_imp_importXLSXSettingsDlg_btnCancel2", "", null, null, "GL301000");
                }
            }
        }
        
        public class c_gltranmodulebatnbr_importcolumns_grdimportcolumn : Grid<c_gltranmodulebatnbr_importcolumns_grdimportcolumn.c_grid_row> {
            
            private static String _GridLocator = "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn";
            
            private static String _GridName = "GLTranModuleBatNbr$ImportColumns_grdImportColumn";
            
            private c_grid_filter_ex gridfilter;
            
            private c_grid_upload gridupload;
            
            public PxToolBar ToolBar {get;set;} //;
            
            public PxButtonCollection Buttons {get;set;} //;
            
		    public virtual void New()
		    {
			    if(ToolBar.New.IsEnabled())
			    {
				    ToolBar.New.ClickAndWait();
				    if (Browser.GetBrowser().Alert != null)
				    {
 					    throw new Exception("ALERT: " + Browser.GetBrowser().Alert.Message); 
				    }
			    }
		    }
            
            public c_gltranmodulebatnbr_importcolumns_grdimportcolumn(String locator, String name) : 
                    base(locator, name) {
                gridfilter = new c_grid_filter_ex("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_fe_gf", null, null, null, "GL301000");
                gridupload = new c_grid_upload("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_upldr", "Files Upload", null, null, "GL301000");
                ToolBar = new PxToolBar();
                ContainerType = "U";
                DataMemberName = "GLTranModuleBatNbr$ImportColumns";
                Buttons = new PxButtonCollection();
            }
            
            public static String GridLocator {
                get {
                    return _GridLocator;
                }
                set {
                    _GridLocator = value;
                }
            }
            
            public static String GridName {
                get {
                    return _GridName;
                }
                set {
                    _GridName = value;
                }
            }
            
            public virtual c_grid_filter_ex FilterForm {
                get {
                    c_grid_filter.Lctr = _GridLocator;
                    return gridfilter;
                }
                set {
                    c_grid_filter.Lctr = _GridLocator;
                    gridfilter = value;
                }
            }
            
            public virtual c_grid_upload UploadForm {
                get {
                    return gridupload;
                }
                set {
                    gridupload = value;
                }
            }
            
            public virtual void Refresh() {
                ActionClick(ToolBar.Refresh);
            }
            
            public virtual void Search() {
                ActionClick(ToolBar.Search);
            }
            
            public virtual void Export() {
                ActionClick(ToolBar.Export);
            }
            
            public virtual void Adjust() {
                ActionClick(ToolBar.Adjust);
            }
            
            public virtual void Save() {
                ActionClick(ToolBar.Save);
            }
            
            public virtual void Delete() {
                ActionClick(ToolBar.Delete);
            }
            
            public virtual void Note() {
                ActionClick(ToolBar.Note);
            }
            
            public virtual void First() {
                ActionClick(Buttons.First);
            }
            
            public virtual void Prev() {
                ActionClick(Buttons.Prev);
            }
            
            public virtual void Next() {
                ActionClick(Buttons.Next);
            }
            
            public virtual void Last() {
                ActionClick(Buttons.Last);
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            public class c_grid_filter_ex : c_grid_filter {
                
                private c_fields fields;
                
                public c_grid_filter_ex(String locator) : 
                        base(locator) {
                    fields = new c_fields();
                }
                
                public c_grid_filter_ex(String locator, String name, String tabid, int? index, String screenId) : 
                        base(locator, name, tabid, index, screenId) {
                    fields = new c_fields();
                }
                
                public virtual c_fields Fields {
                    get {
                        return fields;
                    }
                    set {
                        fields = value;
                    }
                }
                
                public class c_fields {
                    
                    public c_rule.c_property ColumnName;
                    
                    public c_rule.c_property PropertyName;
                    
                    public c_fields() {
                        ColumnName = new c_rule.c_property("ColumnName", "String", "PX.Web.UI.PXTextEdit", 2, "GL301000");
                        PropertyName = new c_rule.c_property("PropertyName", "String", "PX.Web.UI.PXDropDown", 3, "GL301000");
                    }
                }
            }
            
            public class PxToolBar : PxControlCollection {
                
				public ToolBarButton Refresh {get;private set;}
				public ToolBarButton Search {get;private set;}
				public ToolBarButton Export {get;private set;}
				public ToolBarButton Adjust {get;private set;}
				public ToolBarButton New {get;private set;}
				public ToolBarButton Save {get;private set;}
				public ToolBarButton Delete {get;private set;}
				public ToolBarButton Note {get;private set;}
                
                public PxToolBar() {
                    Initialize();
                }
                
                private void Initialize() {
                    Refresh = new ToolBarButton("css=div[data-cmd='Refresh']", "Refresh", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Search = new ToolBarButton("css=div[data-cmd='Search']", "Search", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Export = new ToolBarButton("css=div[data-cmd='ExportExcel']", "Export", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Adjust = new ToolBarButton("css=div[data-cmd='AdjustColumns']", "Adjust", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    New = new ToolBarButton("css=div[data-cmd='AddNew']", "New", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Save = new ToolBarButton("css=div[data-cmd='Save']", "Save", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Delete = new ToolBarButton("css=div[data-cmd='Delete']", "Delete", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Note = new ToolBarButton("css=div[data-cmd='NoteShow']", "Note", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                }
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button First {get;private set;}
				public Button Prev {get;private set;}
				public Button Next {get;private set;}
				public Button Last {get;private set;}
				public Button Ok {get;private set;}
				public Button Cancel {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    First = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfFirst0", "", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Prev = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfPrev0", "", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Next = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfNext0", "", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Last = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfLast0", "", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Ok = new Button("ctl00_phG_grid_imp_importColumnDlg_btnSave", "", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                    Cancel = new Button("ctl00_phG_grid_imp_importColumnDlg_btnCancel", "", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", null, "GL301000");
                }
            }
            
            public class c_grid_row {
                
				public Input ColumnName {get;set;}
				public DropDown PropertyName {get;set;}
                
                public c_grid_row() {
                    ColumnName = new Input("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_ei", "ColumnName", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", 2, "GL301000");
                    ColumnName.DataField = "ColumnName";
                    ColumnName.ValueType = "PX.Web.UI.PXTextEdit";
                    PropertyName = new DropDown("_ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0_ec", "PropertyName", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn", 3, "GL301000");
                    PropertyName.DataField = "PropertyName";
                    PropertyName.ValueType = "PX.Web.UI.PXDropDown";
                }
            }
        }
        
        public class c_gltranmodulebatnbr_importcolumns_lv0 : Container {
            
            public PxButtonCollection Buttons {get;set;} //;
            
			public DateSelector Ed {get;set;}
			public DropDown Ec {get;set;}
			public Selector Es {get;set;}
			public Selector Em {get;set;}
            
            public c_gltranmodulebatnbr_importcolumns_lv0(String locator, String name) : 
                    base(locator, name) {
                Initialize();
            }
            
            public c_gltranmodulebatnbr_importcolumns_lv0(String locator, String name, String tabid, int? index, String screenId) : 
                    base(locator, name, tabid, index, screenId) {
                Initialize();
            }
            
            public virtual void First() {
                ActionClick(Buttons.First);
            }
            
            public virtual void Prev() {
                ActionClick(Buttons.Prev);
            }
            
            public virtual void Next() {
                ActionClick(Buttons.Next);
            }
            
            public virtual void Last() {
                ActionClick(Buttons.Last);
            }
            
            public virtual void Ok() {
                ActionClick(Buttons.Ok);
            }
            
            public virtual void Cancel() {
                ActionClick(Buttons.Cancel);
            }
            
            private void Initialize() {
                Ed = new DateSelector("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0_ed", "Ed", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0", null, "GL301000");
                Ed.DataField = "";
                Ec = new DropDown("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0_ec", "Ec", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0", null, "GL301000");
                Ec.DataField = "";
                Es = new Selector("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0_es", "Es", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0", null, "GL301000");
                Es.DataField = "";
                Em = new Selector("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0_em", "Em", "ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lv0", null, "GL301000");
                Em.DataField = "";
                ContainerType = "U";
                DataMemberName = "GLTranModuleBatNbr$ImportColumns";
                Buttons = new PxButtonCollection();
            }
            
            public class PxButtonCollection : PxControlCollection {
                
				public Button First {get;private set;}
				public Button Prev {get;private set;}
				public Button Next {get;private set;}
				public Button Last {get;private set;}
				public Button Ok {get;private set;}
				public Button Cancel {get;private set;}
                
                public PxButtonCollection() {
                    Initialize();
                }
                
                private void Initialize() {
                    First = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfFirst0", "", null, null, "GL301000");
                    Prev = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfPrev0", "", null, null, "GL301000");
                    Next = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfNext0", "", null, null, "GL301000");
                    Last = new Button("ctl00_phG_grid_imp_importColumnDlg_grdImportColumn_lfLast0", "", null, null, "GL301000");
                    Ok = new Button("ctl00_phG_grid_imp_importColumnDlg_btnSave", "", null, null, "GL301000");
                    Cancel = new Button("ctl00_phG_grid_imp_importColumnDlg_btnCancel", "", null, null, "GL301000");
                }
            }
        }
    }
}
#endregion
